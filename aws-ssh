#!/bin/bash

# set -x  # For debugging

DATABASE_DIR="/opt/aws-admin/database"
KEYS_DIR="$DATABASE_DIR/keys"
SERVERS_DIR="$DATABASE_DIR/servers"
IGNORED_DIR="$DATABASE_DIR/ignored"

AWS_USERS=( "ec2-user" "ubuntu" "centos" "root" "fedora" )

echoerr ()
{
  (>&2 echo $*)
  return 0
}

validate ()
{
  local host=$1
  if grep -wq ^$host "$IGNORED_DIR"/*; then
    local file=$(grep -lw ^$host "$IGNORED_DIR"/*|head -1)
    local msg=$(head -1 $file|cut -d* -f2)
    echoerr -e "IGNORED:"$msg
    exit 1
  fi
}

create-entry ()
{
  local user=$1
  local key=$2
  local host=$3
  local file=$4
  local ssh_string="timeout -s9 20s sudo ssh -q -o PreferredAuthentications=publickey \
   -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i $key -l $user"
  local success=$($ssh_string $host "echo success" 2>/dev/null) 2>/dev/null
  if [ "$success" == "success" ]; then
    echo "$user:$key" > "$file"
  fi
}

aws-add ()
{
  local host=$1
  for u in ${AWS_USERS[*]}; do
    for k in $(ls -1 "$KEYS_DIR"/*.pem); do
      create-entry $u $k $host "$SERVERS_DIR/$host" &
    done
  done
  wait
}

if ! /usr/bin/id $(/usr/bin/whoami) | grep -qiw "aws-admins"; then
  echoerr "ERROR: You need to be part of 'aws-admins' group to run this script"
  exit 1
fi

host=$1
shift
commands=$*
map="$SERVERS_DIR/$host"
[ ! "$host" ] && echoerr "Usage: sudo aws-ssh hostname [command...]" && exit 1

validate $host

[ ! -f "$map" ] && aws-add $host

if [ -f "$map" ]; then
  user=$(cat "$map"|cut -d: -f1)
  key=$(cat "$map"|cut -d: -f2)
  ssh_string="sudo ssh -q -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i $key -l $user"
  $ssh_string $host $commands
else
  echoerr "ERROR: Correct key for $host does not exist in database"
  exit 1
fi

